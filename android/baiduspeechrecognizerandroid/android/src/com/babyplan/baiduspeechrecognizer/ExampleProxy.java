/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.babyplan.baiduspeechrecognizer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.TiLifecycle.OnActivityResultEvent;
import org.appcelerator.titanium.util.TiActivityResultHandler;
import org.appcelerator.titanium.util.TiActivitySupport;
import org.appcelerator.titanium.util.TiRHelper;
import org.appcelerator.titanium.util.TiRHelper.ResourceNotFoundException;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import com.baidu.speech.VoiceRecognitionService;

import android.app.Activity;
import android.content.ComponentName;
import android.content.Intent; 
import android.os.Bundle;
import android.speech.RecognitionListener;
import android.speech.SpeechRecognizer;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollProxy;
import org.appcelerator.kroll.common.AsyncResult;
import org.appcelerator.kroll.common.TiMessenger;
import org.appcelerator.titanium.TiC;

import android.os.Build;
import android.os.Handler;
import android.os.Message;
import android.speech.RecognizerIntent;

import org.appcelerator.titanium.TiLifecycle.OnLifecycleEvent;


// This proxy can be created by calling Test.createExample({message: "hello world"})
@Kroll.proxy(creatableInModule=BaiduspeechrecognizerandroidModule.class)
public class ExampleProxy extends KrollProxy implements RecognitionListener
{
	// Standard Debugging variables
	private static final String LCAT = "ExampleProxy";
	private static final boolean DBG = TiConfig.LOGD;
	private ExampleProxy mExample;
	private KrollFunction callback;
	
	// Constructor
	public ExampleProxy()
	{
		super();
		mExample = this;
	}
	
	// Standard Debugging variables
		private static final int REQUEST_UI = 1;
		
		public static final int STATUS_None = 0;
	    public static final int STATUS_WaitingReady = 2;
	    public static final int STATUS_Ready = 3;
	    public static final int STATUS_Speaking = 4;
	    public static final int STATUS_Recognition = 5;
	    private SpeechRecognizer speechRecognizer;
	    private int status = STATUS_None;
	    private long speechEndTime = -1;
	    private static final int EVENT_ERROR = 11;

		// You can define constants with @Kroll.constant, for example:
		// @Kroll.constant public static final String EXTERNAL_NAME = value;
		
		private static final int MSG_CREATESPEECHRECOGNIZER = 60000;
		private static final int MSG_STARTSPEECHRECOGNIZER = 60001;
		private static final int MSG_CANCELSPEECHRECOGNIZER = 60002;
		private static final int MSG_STOPSPEECHRECOGNIZER = 60003;
		
		private final Handler handler = new Handler(TiMessenger.getMainMessenger()
				.getLooper(), new Handler.Callback() {
			public boolean handleMessage(Message msg) {
				Log.d(LCAT, "handleMessage:" + msg.what);
				switch (msg.what) {
				case MSG_CREATESPEECHRECOGNIZER: {
					AsyncResult result = (AsyncResult) msg.obj;
					createSpeechRecognizerSynch();
					result.setResult(null);
					return true;
				}
				case MSG_STARTSPEECHRECOGNIZER: {
					AsyncResult result = (AsyncResult) msg.obj;
					startRecognize();
					result.setResult(null);
					return true;
				}
				case MSG_CANCELSPEECHRECOGNIZER: {
					AsyncResult result = (AsyncResult) msg.obj;
					cancelRecognize();
					result.setResult(null);
					return true;
				}
				case MSG_STOPSPEECHRECOGNIZER: {
					AsyncResult result = (AsyncResult) msg.obj;
					stopRecognize();
					result.setResult(null);
					return true;
				}
				}
				return false;
			}

		});
		
		protected void createBaiduspeechandroid() {
			if (!TiApplication.isUIThread()) {
				Log.d(LCAT, "handleCreationDict not on UI Thread");
				TiMessenger.sendBlockingMainMessage(handler
						.obtainMessage(MSG_CREATESPEECHRECOGNIZER));
			} else {
				Log.d(LCAT, "handleCreationDict on UI Thread");
				createSpeechRecognizerSynch();
			}
		}

		protected void createSpeechRecognizerSynch() {
			Log.d(LCAT, "createSpeechRecognizer");
			speechRecognizer = SpeechRecognizer.createSpeechRecognizer(TiApplication.getInstance().getApplicationContext(), new ComponentName(TiApplication.getInstance().getApplicationContext(), VoiceRecognitionService.class));
			speechRecognizer.setRecognitionListener(ExampleProxy.this);
		}
		
		protected void startRecognize() {
			Log.d(LCAT, "startRecognize");
			Intent intent = new Intent();
	        bindParams(intent);
	        
	        intent.putExtra("args", "");
	        intent.setAction("com.baidu.action.RECOGNIZE_SPEECH");
	        TiApplication appContext = TiApplication.getInstance();
	        Activity activity = appContext.getCurrentActivity();
	        TiActivitySupport activitySupport = (TiActivitySupport) activity;
	        final int code = activitySupport.getUniqueResultCode();
	        activitySupport.launchActivityForResult(intent, code, new TiActivityResultHandler() {
				public void onResult(Activity activity, int requestCode, int resultCode, Intent data)
				{
					print("onActivityResult");
					// print("requestCode = " + requestCode);
					// print("resultCode = " + resultCode);
					if (requestCode != code) {
						return;
					}
					if (resultCode == Activity.RESULT_OK) {
						mExample.onResults(data.getExtras());
			        }
				}

				public void onError(Activity activity, int requestCode, Exception e)
				{
				}
			});
	        // activity.startActivityForResult(intent, REQUEST_UI);
//	        speechEndTime = -1;
//	        speechRecognizer.startListening(intent);
		}

		protected void cancelRecognize() {
			Log.d(LCAT, "cancelRecognize");
			speechRecognizer.cancel();
	        status = STATUS_None;
		}

		protected void stopRecognize() {
			Log.d(LCAT, "stopRecognize");
			speechRecognizer.stopListening();
		}
			
		public void bindParams(Intent intent) {
	        if (true) {
	            try {
					intent.putExtra(Constant.EXTRA_SOUND_START, TiRHelper.getApplicationResource("raw.bdspeech_recognition_start"));
					intent.putExtra(Constant.EXTRA_SOUND_END, TiRHelper.getApplicationResource("raw.bdspeech_speech_end"));
		            intent.putExtra(Constant.EXTRA_SOUND_SUCCESS, TiRHelper.getApplicationResource("raw.bdspeech_recognition_success"));
		            intent.putExtra(Constant.EXTRA_SOUND_ERROR, TiRHelper.getApplicationResource("raw.bdspeech_recognition_error"));
		            intent.putExtra(Constant.EXTRA_SOUND_CANCEL, TiRHelper.getApplicationResource("raw.bdspeech_recognition_cancel"));
				} catch (ResourceNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	        }
	    }
		
		private String buildTestSlotData() {
	        JSONObject slotData = new JSONObject();
	        JSONArray name = new JSONArray().put("李涌泉").put("郭下纶");
	        JSONArray song = new JSONArray().put("七里香").put("发如雪");
	        JSONArray artist = new JSONArray().put("周杰伦").put("李世龙");
	        JSONArray app = new JSONArray().put("手机百度").put("百度地图");
	        JSONArray usercommand = new JSONArray().put("关灯").put("开门");
	        try {
	            slotData.put(Constant.EXTRA_OFFLINE_SLOT_NAME, name);
	            slotData.put(Constant.EXTRA_OFFLINE_SLOT_SONG, song);
	            slotData.put(Constant.EXTRA_OFFLINE_SLOT_ARTIST, artist);
	            slotData.put(Constant.EXTRA_OFFLINE_SLOT_APP, app);
	            slotData.put(Constant.EXTRA_OFFLINE_SLOT_USERCOMMAND, usercommand);
	        } catch (JSONException e) {

	        }
	        return slotData.toString();
	    }
		
		@Kroll.method
		public void start(KrollFunction callback) {
			this.callback = callback;
			createBaiduspeechandroid();
			print("点击了“开始”");
			Log.v(LCAT, "start:"+speechRecognizer);
			if (speechRecognizer != null) {
				if (!TiApplication.isUIThread()) {
					TiMessenger.sendBlockingMainMessage(handler
							.obtainMessage(MSG_STARTSPEECHRECOGNIZER));
				} else {
					startRecognize();
				}
			}
	    }
		
//	    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
//	        if (resultCode == Activity.RESULT_OK) {
//	        	print("onActivityResult");
//	            onResults(data.getExtras());
//	        }
//	    }

		@Kroll.method
	    public void stop() {
	        print("点击了“说完了”");
	        Log.v(LCAT, "stop:"+speechRecognizer);
			if (speechRecognizer != null) {
				if (!TiApplication.isUIThread()) {
					TiMessenger.sendBlockingMainMessage(handler
							.obtainMessage(MSG_STOPSPEECHRECOGNIZER));
				} else {
					stopRecognize();
				}
			}
	    }

		@Kroll.method
		public void cancel() {
	        print("点击了“取消”");
	        Log.v(LCAT, "cancel:"+speechRecognizer);
			if (speechRecognizer != null) {
				if (!TiApplication.isUIThread()) {
					TiMessenger.sendBlockingMainMessage(handler
							.obtainMessage(MSG_CANCELSPEECHRECOGNIZER));
				} else {
					cancelRecognize();
				}
			}
	    }

	    @Override
	    public void onReadyForSpeech(Bundle params) {
	        status = STATUS_Ready;
	        print("准备就绪，可以开始说话");
	    }

	    @Override
	    public void onBeginningOfSpeech() {
	        status = STATUS_Speaking;
	        print("检测到用户的已经开始说话");
	    }

	    @Override
	    public void onRmsChanged(float rmsdB) {

	    }

	    @Override
	    public void onBufferReceived(byte[] buffer) {

	    }

	    @Override
	    public void onEndOfSpeech() {
	        speechEndTime = System.currentTimeMillis();
	        status = STATUS_Recognition;
	        print("检测到用户的已经停止说话");
	    }

	    @Override
	    public void onError(int error) {
	        status = STATUS_None;
	        StringBuilder sb = new StringBuilder();
	        switch (error) {
	            case SpeechRecognizer.ERROR_AUDIO:
	                sb.append("音频问题");
	                break;
	            case SpeechRecognizer.ERROR_SPEECH_TIMEOUT:
	                sb.append("没有语音输入");
	                break;
	            case SpeechRecognizer.ERROR_CLIENT:
	                sb.append("其它客户端错误");
	                break;
	            case SpeechRecognizer.ERROR_INSUFFICIENT_PERMISSIONS:
	                sb.append("权限不足");
	                break;
	            case SpeechRecognizer.ERROR_NETWORK:
	                sb.append("网络问题");
	                break;
	            case SpeechRecognizer.ERROR_NO_MATCH:
	                sb.append("没有匹配的识别结果");
	                break;
	            case SpeechRecognizer.ERROR_RECOGNIZER_BUSY:
	                sb.append("引擎忙");
	                break;
	            case SpeechRecognizer.ERROR_SERVER:
	                sb.append("服务端错误");
	                break;
	            case SpeechRecognizer.ERROR_NETWORK_TIMEOUT:
	                sb.append("连接超时");
	                break;
	        }
	        sb.append(":" + error);
	        print("识别失败：" + sb.toString());
	    }

	    public KrollDict getResultKrollDict(String[] results) {
			KrollDict data = new KrollDict();
			if (results != null) {
				data.put(BaiduspeechrecognizerandroidModule.RESULTS, results);
			}
			return data;
		}
	    
	    @Override
	    public void onResults(Bundle results) {
	        long end2finish = System.currentTimeMillis() - speechEndTime;
	        status = STATUS_None;
	        ArrayList<String> nbest = results.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
	        print("识别成功：" + Arrays.toString(nbest.toArray(new String[nbest.size()])));
	        //回调
	        KrollDict data = getResultKrollDict(nbest.toArray(new String[nbest.size()]));
	        callback.call(getKrollObject(), data);
			
	        String json_res = results.getString("origin_result");
	        try {
	            print("origin_result=\n" + new JSONObject(json_res).toString(4));
	        } catch (Exception e) {
	            print("origin_result=[warning: bad json]\n" + json_res);
	        }
	        String strEnd2Finish = "";
	        if (end2finish < 60 * 1000) {
	            strEnd2Finish = "(waited " + end2finish + "ms)";
	        }
	    }

	    @Override
	    public void onPartialResults(Bundle partialResults) {
	        ArrayList<String> nbest = partialResults.getStringArrayList(SpeechRecognizer.RESULTS_RECOGNITION);
	        if (nbest.size() > 0) {
	            print("~临时识别结果：" + Arrays.toString(nbest.toArray(new String[0])));
	        }
	    }

	    @Override
	    public void onEvent(int eventType, Bundle params) {
	        switch (eventType) {
	            case EVENT_ERROR:
	                String reason = params.get("reason") + "";
	                print("EVENT_ERROR, " + reason);
	                break;
	            case VoiceRecognitionService.EVENT_ENGINE_SWITCH:
	                int type = params.getInt("engine_type");
	                print("*引擎切换至" + (type == 0 ? "在线" : "离线"));
	                break;
	        }
	    }

	    private void print(String msg) {
	        Log.d(LCAT, "----" + msg);
	    }
	
}